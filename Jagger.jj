// Options for JavaCC.
options { LOOKAHEAD=1; FORCE_LA_CHECK=true; }

// Fonction principale
PARSER_BEGIN(Jagger)
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.ArrayList;
public class Jagger
{
    public static void main(String args[]) throws ParseException,FileNotFoundException
    {
        Jagger parser = new Jagger(new FileInputStream(args[0]));
		ArrayList<AST> a=parser.mainloop();
		System.out.println("Pretty Printer :\n\n ");
		for(int i=0;i<a.size();i++)
		{	Eval2 aze=new Eval2();
			a.get(i).accept(new PrettyPrinter());System.out.println("");
		}
		System.out.println("\n\nEvaluateur :\n\n ");
		for(int i=0;i<a.size();i++)
		{	Eval2 aze=new Eval2();
			a.get(i).accept(aze);System.out.print("--->");System.out.println(aze.val);
		}
    }
}
PARSER_END(Jagger)

// Characters to ignore.
SKIP: { " " | "\r" | "\t" | "\n"}

// Token specifications.
TOKEN:
{
    < NUMBER: (<DIGIT>)+ ("." (<DIGIT>)*)? >  // A decimal number.
|   < DIGIT: ["0"-"9"] >                      // A decimal digit.
|	< TRUE:"true">
|	< FALSE:"false">
|   < EOL: ";" >                             // End of line.
|	< CHARC:("'")(~["'"])*("'")>
|	< IF:"if">
|	< THEN:"then">
|	< ELSE:"else">
|	< LET:"let">
|	< IN:"in">
|	< END:"end">
|	< PRINT:"print">
|	< VAR:"var">
|	< WHILE:"while">
|	< FOR:"for">
|	< DO:"do">

}

TOKEN:
{
	< VARIABLE: (["a"-"z","A"-"Z","_"])(["a"-"z","A"-"Z","_","0"-"9"])*>

}

// Main lopp: read expressions on a line until end of file.
//     mainloop â†’ (expression <EOL>)* <EOF>
ArrayList<AST> mainloop():
{ArrayList<AST>a=new ArrayList<AST>();AST e;}
{    (
      e=ast() <EOL> { a.add(e);/*a.accept(new PrettyPrinter());System.out.println();*/ }
    )*

    /* <EOF>*/{	return a;}

}
AST ast():
{ AST a;}
	{
	 a=instruction(){return a;}
	|a=expression(){return a;}		
}

Ins instruction():
{	Exp a;
	ArrayList<GenCtx> b;
	ArrayList<AST> c;
	Token t;
	AST d;
}
{
	
	<PRINT>"("a=expression()")"{return new Print(a);}
	| <LET> b=genCtx() <IN> c=mainloop() <END> {return new LetIn(b,c);}
	| t=<VARIABLE> ":=" a=expression(){return new Affect(t.toString(),a);}
	| <WHILE> a=expression() <DO> c=mainloop() <END> {return new While(a,c);}
	| <FOR> b=genCtx() <EOL> a=expression() <EOL> d=ast() <EOL> <DO> c=mainloop() <END> {return new For(b,a,d,c);}
	
	//for en tant que letIn->while
	/*	{	ArrayList<AST> e=new ArrayList<AST>();
			c.add(d);
			e.add(new While(a,c));
			return new LetIn(b,e);
		}*/
	
}

ArrayList<GenCtx> genCtx():
{ArrayList<GenCtx>a=new ArrayList<GenCtx>();Exp e;Token t;}
{
	(<VAR> t=<VARIABLE> ":="e=expression() {a.add(new GenCtx(t.toString(),e));})+{return a;}
}
		
// Expression (the axiom).
// E -> T ('+'T | '-'T)*
Exp expression():
{ Exp a,b,c; }
{
	<IF> a=expression() <THEN> b=expression() <ELSE> c=expression() {return new Ite(a,b,c);}
	|	
    a=term()
    (
      "+" b=expression() {return new Bin(a,"+",b); }
    | "-" b=expression() {return new Bin(a,"-",b); }
	| "==" b=expression() {return new Bin(a,"==",b); }
	| "<" b=expression() {return new Bin(a,"<",b); }
	| ">" b=expression() {return new Bin(a,">",b); }
	| "<=" b=expression() {return new Bin(a,"<=",b); }
	| ">=" b=expression() {return new Bin(a,">=",b); }
	| "<>" b=expression() {return new Bin(a,"<>",b); } 
    )? { return a; }
}

// Term.
// T -> F ('*'F | '/'F)*
Exp term():
{ Exp a,b; }
{
    a=factor()
    (
      "*" b=factor() {return new Bin(a,"*",b);}
    | "/" b=factor() {return new Bin(a,"/",b); }
    )* { return a; }
}

// Factor of an expression.
// F -> <NUMBER> | "(" E ")"
Exp factor():
{ Token t; Exp e,a; }
{
      t=<NUMBER> { return new Num(Double.parseDouble(t.toString())); }
	| t=<VARIABLE> {return new Var(t.toString());}
	| t=<CHARC>  { return new CharC(t.toString());}
	| <TRUE>{return new Bool(true);}
	| <FALSE>{return new Bool(false);}
	| "-"a=factor() { return new Una(a,"-"); }
	| "+"a=factor() { return new Una(a,"+"); }
    | "(" e=expression() ")" { return e; }
}
