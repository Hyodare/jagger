// Options for JavaCC.
options { LOOKAHEAD=1; FORCE_LA_CHECK=true; }

// Fonction principale
PARSER_BEGIN(Jagger)
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.ArrayList;
public class Jagger
{
    public static void main(String args[]) throws ParseException,FileNotFoundException
    {
        Jagger parser = new Jagger(new FileInputStream(args[0]));
		ArrayList<AST> a=new ArrayList<AST>();
        parser.mainloop(a);
		for(int i=0;i<a.size();i++)
		{	
			a.get(i).accept(new Eval()).accept(new PrettyPrinter());System.out.println();
		}
		
    }
}
PARSER_END(Jagger)

// Characters to ignore.
SKIP: { " " | "\r" | "\t" | "\n"}

// Token specifications.
TOKEN:
{
    < NUMBER: (<DIGIT>)+ ("." (<DIGIT>)*)? >  // A decimal number.
|   < DIGIT: ["0"-"9"] >                      // A decimal digit.
|   < EOL: ";" >                             // End of line.
}

// Main lopp: read expressions on a line until end of file.
//     mainloop â†’ (expression <EOL>)* <EOF>
void mainloop(ArrayList<AST> a):
{AST e;}
{    (
      e=ast() <EOL> { a.add(e);/*a.accept(new PrettyPrinter());System.out.println();*/ }
    )*
    <EOF>
}
AST ast():
{ AST a;}
	{
	 a=instruction(){return a;}
	|a=expression(){return a;}		
}

Ins instruction():
{Exp a;		}
{
	
	"print("a=expression()")"{return new Print(a);}
	
}
// Expression (the axiom).
// E -> T ('+'T | '-'T)*
Exp expression():
{ Exp a,b,c; }
{
	"if" a=expression() "then" b=expression() "else" c=expression() {return new Ite(a,b,c);}
	|	
    a=term()
    (
      "+" b=expression() {return new Bin(a,"+",b); }
    | "-" b=expression() {return new Bin(a,"-",b); }
	| "==" b=expression() {return new Bin(a,"=",b); }
	| "<" b=expression() {return new Bin(a,"<",b); }
	| ">" b=expression() {return new Bin(a,">",b); }
	| "<=" b=expression() {return new Bin(a,"<=",b); }
	| ">=" b=expression() {return new Bin(a,">=",b); }
	| "<>" b=expression() {return new Bin(a,"<>",b); } 
    )? { return a; }
}

// Term.
// T -> F ('*'F | '/'F)*
Exp term():
{ Exp a,b; }
{
    a=factor()
    (
      "*" b=factor() {return new Bin(a,"*",b);}
    | "/" b=factor() {return new Bin(a,"/",b); }
    )* { return a; }
}

// Factor of an expression.
// F -> <NUMBER> | "(" E ")"
Exp factor():
{ Token t; Exp e,a; }
{
      t=<NUMBER> { return new Num(Double.parseDouble(t.toString())); }
	| "-"a=factor() { return new Una(a,"-"); }
	| "+"a=factor() { return new Una(a,"+"); }
    | "(" e=expression() ")" { return e; }
}
